#Task 1: Import Libraries and Define the OpenAI API Key
# ! pip install openai
! pip install openai --upgrade
! pip install openai==0.28
# Import necessary libraries
import openai
import os

# go to "https://platform.openai.com/api-keys" to get your api key

# Define OpenAI API key
openai.api_key = "API KEY HERE"

#Task 2: Chat with ChatGPT using the API key
# Function to send a message to ChatGPT and get a response
def chat_with_gpt(message):
    response = openai.Completion.create(
        engine="gpt-3.5-turbo",  # Updated to a supported model
        prompt=message,
        max_tokens=50  # Adjust this based on your desired response length
    )
    return response.choices[0].text

# Start a conversation
conversation = []

while True:
    user_input = input("You: ")
    conversation.append(f"You: {user_input}")

    # Exit the loop if the user wants to end the conversation
    if user_input.lower() == 'exit':
        break

    # Generate a response from ChatGPT
    response = chat_with_gpt("\n".join(conversation))
    print(f"ChatGPT: {response}")
    conversation.append(f"ChatGPT: {response}")
#Task 3: Define the Chatbot Conversation Function


def chatbot_conversation(initial_prompt):
    # Initialize conversation with initial prompt
    prompt = initial_prompt

    # Continuously interact with the user until they end the conversation
    while True:
        # Get user input
        user_input = input("User: ")

        # Send user input and current prompt to ChatGPT API and receive response
        response = openai.Completion.create(
            model="text-davinci-003", # this model is specifically designed to understand and generate natural language text (instruction-following tasks)
            prompt=prompt + "\nUser: " + user_input,
            temperature= 0.7, ### insert the temperature here ###
            max_tokens= 1024 ### insert the max number tokens here ###
        )

        # Extract and display ChatGPT's response
        chatbot_response = response.choices[0].text
        print("Chatbot:", chatbot_response)

        # Update prompt for next iteration
        prompt = prompt + "\nChatbot: " + chatbot_response + "\n"
#Task 4: Handle Frequently Asked Questions
###Handling FAQs for Product Information
def product_information_faq(user_input):
    # Identify product-related keywords in user input
    product_keywords = ["product", "item", "details", "features", "specifications", "capabilities"] ### insert product keywords here ###
    for keyword in product_keywords:
        if keyword in user_input.lower():
            # Provide relevant product information based on user's query
            print("Please specify the product you're interested in and I'll provide more details.")
            product_name = input("Product name: ")
            # Use product_name to retrieve and display product information from a database or API
            print("Product information for " + product_name + ":")
            # Display product details, features, and specifications
###Handling FAQs for Shipping and Returns
def shipping_and_returns_faq(user_input):
    # Identify shipping or returns keywords in user input
    shipping_keywords = ["shipping", "delivery", "courier", "timeline"] ### insert product keywords here ###
    returns_keywords = ["return", "refund", "exchange", "policy"]

    for keyword in shipping_keywords:
        if keyword in user_input.lower():
            # Provide relevant shipping information based on user's query
            print("Shipping options and timelines for your order:")
            # Display shipping options, delivery timelines, and estimated delivery dates

    for keyword in returns_keywords:
        if keyword in user_input.lower():
            # Provide relevant returns information based on user's query
            print("Our returns policy and procedures:")
            # Display returns policy, return initiation process, and refund or exchange options
###Handling FAQs for Customer Support
def customer_support_faq(user_input):
    # Identify customer support keywords in user input
    support_keywords = ["help", "issue", "problem", "assistance", "support"] ### insert product keywords here ###

    for keyword in support_keywords:
        if keyword in user_input.lower():
            # Provide relevant customer support assistance
            print("Please describe your issue or problem in detail so we can assist you.")
            user_issue = input("Description of issue: ")
            # Use user_issue to identify and resolve the user's problem or direct them to relevant support resources
            print("We're here to help. Please provide more details about your issue.")
#Task 5: Initiate Chatbot Conversation and Testing
# Start the chatbot conversation with a welcome message
print("Welcome to our customer service chatbot. How can I help you today?")

# Initialize conversation with an empty prompt
prompt = ""

# Continuously interact with the user and handle their queries
while True:
    user_input = input("User: ")

    # Check if user wants to end the conversation
    if user_input.lower() == "bye" or user_input.lower() == "quit":
        print("Thank you for using our chatbot. Have a great day!")
        break

    # Construct the prompt for ChatGPT API
    prompt += "\nUser: " + user_input

    # Send user input and current prompt to ChatGPT API and receive response
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0.7,
        max_tokens=1024
    )

    # Extract and display ChatGPT's response
    chatbot_response = response.choices[0].text

    # Skip empty responses
    if not chatbot_response:
        continue

    print("Chatbot:", chatbot_response)

    # Update prompt for next iteration
    prompt += "\nChatbot: " + chatbot_response + "\n"

#Task 6: Build a Customized Chatbot and Chat with It
# Import the OpenAI library
import openai

# Start the chatbot conversation with a welcome message
print("Welcome to our ebook customer service chatbot. How can I assist you with your ebook queries today?")

# Initialize conversation with a system message to set the context for ChatGPT
prompt = "System: You are a customer service AI knowledgeable about ebooks.\\n"

# Continuously interact with the user and handle their queries
while True:
    user_input = input("User: ")

    # Check if user wants to end the conversation
    if user_input.lower() in ["bye", "quit"]:
        print("Thank you for using our chatbot. Have a great day!")
        break

    # Add user input to prompt
    prompt += "User: " + user_input + "\\n"

    # Send user input and current prompt to ChatGPT API and receive response
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0.7,
        max_tokens=150,
        stop=["\\n", " User:", " System:"]
    )

    # Extract and display ChatGPT's response
    chatbot_response = response.choices[0].text.strip()

    # Skip empty responses
    if not chatbot_response:
        continue

    # Check if the user's query is off-topic
    if "ebook" not in user_input.lower() and "book" not in user_input.lower() and any(word in chatbot_response.lower() for word in ["sorry", "don't know", "not sure"]):
        print("Chatbot: I'm sorry, I specialize in ebooks. Could you please ask something related to that topic?")
    else:
        print("Chatbot:", chatbot_response)

    # Update prompt for next iteration
    prompt += "Chatbot: " + chatbot_response + "\\n"
